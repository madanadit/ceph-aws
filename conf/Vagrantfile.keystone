# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
VAGRANTFILE_API_VERSION = '2'

config_file=File.expand_path(File.join(File.dirname(__FILE__), 'vagrant_variables.yml'))
settings=YAML.load_file(config_file)

SUBNET         = settings['subnet']
BOX            = settings['vagrant_box']
BOX_URL        = settings['vagrant_box_url']
ETH            = settings['eth']
KEYSTONES      = settings['keystone_vms']

AWS_ACCESS_KEY_ID 	= settings['aws_access_key_id']
AWS_SECRET_ACCESS_KEY 	= settings['aws_secret_access_key']
AWS_REGION 		= settings['aws_region']
AWS_ZONE 		= settings['aws_zone']
AWS_KEYPAIR 		= settings['aws_keypair_name']
AWS_AMI 		= settings['aws_ami']
AWS_INSTANCE_TYPE 	= settings['aws_instance_type']
AWS_SSH_USERNAME 	= settings['aws_ssh_username']
AWS_SSH_PRIVATE_KEYPATH = settings['aws_ssh_private_key_path']

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = BOX
  config.vm.box_url = BOX_URL
  config.ssh.insert_key = false # workaround for https://github.com/mitchellh/vagrant/issues/5048
  config.ssh.pty = true

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = AWS_ACCESS_KEY_ID
    aws.secret_access_key = AWS_SECRET_ACCESS_KEY
    aws.region = AWS_REGION
    aws.keypair_name = AWS_KEYPAIR
    aws.ami = AWS_AMI
    aws.instance_type = AWS_INSTANCE_TYPE
    aws.availability_zone = AWS_ZONE
    aws.security_groups = [ 'test-open' ]

    override.ssh.username = AWS_SSH_USERNAME
    override.ssh.private_key_path = AWS_SSH_PRIVATE_KEYPATH
    override.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__args: ['-a', '--delete']
  end

  (0..KEYSTONES - 1).each do |i|
    config.vm.define "keystone#{i}" do |keystone|
      keystone.vm.hostname = "keystone#{i}"
      keystone.vm.network :private_network, ip: "#{SUBNET}.9#{i}"
    end
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'getreqs.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'rabbitmq_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'galera_all'         => (0..KEYSTONES - 1).map { |j| "keystone#{j}" }
    }
    ansible.limit = 'all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'prepare-vm.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'rabbitmq_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'galera_all'         => (0..KEYSTONES - 1).map { |j| "keystone#{j}" }
    }
    ansible.limit = 'all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'deploy.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'rabbitmq_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'galera_all'         => (0..KEYSTONES - 1).map { |j| "keystone#{j}" }
    }
    ansible.limit = 'all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'test.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'rabbitmq_all'       => (0..KEYSTONES - 1).map { |j| "keystone#{j}" },
      'galera_all'         => (0..KEYSTONES - 1).map { |j| "keystone#{j}" }
    }
    ansible.limit = 'all'
  end
end
