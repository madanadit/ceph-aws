# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
VAGRANTFILE_API_VERSION = '2'

config_file=File.expand_path(File.join(File.dirname(__FILE__), 'vagrant_variables.yml'))
settings=YAML.load_file(config_file)

NMONS          = settings['mon_vms']
NOSDS          = settings['osd_vms']
RESTAPI        = settings['restapi']
SUBNET         = settings['subnet']
BOX            = settings['vagrant_box']
BOX_URL        = settings['vagrant_box_url']
MEMORY         = settings['memory']
ETH            = settings['eth']
JOURNAL_SIZE   = settings['journal_size']

AWS_ACCESS_KEY_ID 	= settings['aws_access_key_id']
AWS_SECRET_ACCESS_KEY 	= settings['aws_secret_access_key']
AWS_REGION 		= settings['aws_region']
AWS_ZONE 		= settings['aws_zone']
AWS_KEYPAIR 		= settings['aws_keypair_name']
AWS_AMI 		= settings['aws_ami']
AWS_INSTANCE_TYPE 	= settings['aws_instance_type']
AWS_SSH_USERNAME 	= settings['aws_ssh_username']
AWS_SSH_PRIVATE_KEYPATH = settings['aws_ssh_private_key_path']
AWS_DEVICE_NAME 	= settings['aws_device_name']
AWS_EBS_VOLUME_SIZE	= settings['aws_ebs_volume_size']

ansible_provision = proc do |ansible|
  ansible.playbook = 'ceph-ansible/site.yml'
  ansible.verbose = "vvv"

  ansible.groups = {
    'mons'            => (0..NMONS - 1).map { |j| "mon#{j}" },
    'osds'            => (0..NOSDS - 1).map { |j| "osd#{j}" },
    'rgws'            => (0..NMONS - 1).map { |j| "mon#{j}" }
  }

  if RESTAPI then
    ansible.groups['restapis'] = (0..NMONS - 1).map { |j| "mon#{j}" }
  end

  ansible.extra_vars = {
    "ceph_#{settings['ceph_install_source']}"=> 'true',
    journal_collocation: 'true',
    pool_default_size: '1',
    journal_size: JOURNAL_SIZE,
    monitor_interface: ETH,
    cluster_network: "#{SUBNET}.0/16",
    public_network: "#{SUBNET}.0/16",
    devices: settings['disks'],
    os_tuning_params: settings['os_tuning_params']
  }
  ansible.limit = 'all'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = BOX
  config.vm.box_url = BOX_URL
  config.ssh.insert_key = false # workaround for https://github.com/mitchellh/vagrant/issues/5048
  config.ssh.pty = true

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = AWS_ACCESS_KEY_ID
    aws.secret_access_key = AWS_SECRET_ACCESS_KEY
    aws.region = AWS_REGION
    aws.keypair_name = AWS_KEYPAIR
    aws.ami = AWS_AMI
    aws.instance_type = AWS_INSTANCE_TYPE
    aws.availability_zone = AWS_ZONE
    aws.security_groups = [ 'test-open' ]
    aws.block_device_mapping = [{ 'DeviceName' => AWS_DEVICE_NAME, 'Ebs.VolumeSize' => AWS_EBS_VOLUME_SIZE }]

    override.ssh.username = AWS_SSH_USERNAME
    override.ssh.private_key_path = AWS_SSH_PRIVATE_KEYPATH
    override.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__args: ['-a', '--delete']
  end

  (0..NMONS - 1).each do |i|
    config.vm.define "mon#{i}" do |mon|
      mon.vm.hostname = "ceph-mon#{i}"
      mon.vm.network :private_network, ip: "#{SUBNET}.1#{i}"
    end
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'ansible-role-keystone/getreqs.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..NMONS - 1).map { |j| "mon#{j}" }
    }
    ansible.limit = 'keystone_all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'ansible-role-keystone/prepare-vm.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..NMONS - 1).map { |j| "mon#{j}" }
    }
    ansible.limit = 'keystone_all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'ansible-role-keystone/deploy.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..NMONS - 1).map { |j| "mon#{j}" }
    }
    ansible.limit = 'keystone_all'
  end

  config.vm.provision :ansible do |ansible|
    ansible.playbook = 'ansible-role-keystone/test.yml'
    ansible.verbose = "vvv"
    ansible.groups = {
      'keystone_all'       => (0..NMONS - 1).map { |j| "mon#{j}" }
    }
    ansible.limit = 'keystone_all'
  end

  (0..NOSDS - 1).each do |i|
    config.vm.define "osd#{i}" do |osd|
      osd.vm.hostname = "ceph-osd#{i}"
      osd.vm.network :private_network, ip: "#{SUBNET}.10#{i}"
      osd.vm.network :private_network, ip: "#{SUBNET}.20#{i}"
      
      # Run the provisioner after the last machine comes up
      osd.vm.provision 'ansible', &ansible_provision if i == (NOSDS - 1)
    end
  end
end
